select.person = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE person_id = ?
select.all.person = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id)
select.person.by.username = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE user_name = ?
select.person.by.email = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE email = ?
insert.person= INSERT INTO logistic_company.person (user_name, password, registration_date, contact_id) VALUES (?,?,?,?)
upsert.person = INSERT INTO logistic_company.person (person_id, user_name, password, registration_date, contact_id) VALUES (?,?,?,?,?) ON CONFLICT (person_id)  DO UPDATE SET (person_id, user_name, password, registration_date, contact_id) = (excluded.person_id,  excluded.user_name, excluded.password, excluded.registration_date, excluded.contact_id);
delete.person = DELETE FROM logistic_company.person WHERE person_id = ?
select.person.by.email.or.username = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE email = ? OR user_name = ?
select.person.employee = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role.is_employee_role = TRUE
select.person.search = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority, now()FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE LOWER(first_name) LIKE LOWER(:first_name) AND LOWER(last_name) LIKE LOWER(:last_name) AND registration_date BETWEEN :from AND :to AND role_id IN (:role_ids);
select.person.by.role_id = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_id = ?
select.person.by.contact_id = SELECT person_id, user_name, password, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE contact_id = ?
select.person.search.statistic = SELECT person_id, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority, now()FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id)  WHERE LOWER(first_name) LIKE LOWER(:first_name) AND LOWER(last_name) LIKE LOWER(:last_name)  AND role_id IN (:role_ids) ORDER BY (:order);
select.person.search.statistic.order.by.registration =SELECT count(person_id) As count_orders, person_id, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority, now()FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.task ON person_id=employee_id INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) GROUP BY person_id, priority, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, is_completed HAVING LOWER(first_name) LIKE LOWER(:first_name) AND LOWER(last_name) LIKE LOWER(:last_name)  AND role_id IN (:role_ids) AND is_completed is TRUE ORDER BY registration_date DESC;
select.person.search.statistic.order.by.order.handled = SELECT count(person_id) As count_orders, person_id, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority, now()FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.task ON person_id=employee_id INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id)  GROUP BY person_id,  priority,  registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, is_completed HAVING LOWER(first_name) LIKE LOWER(:first_name) AND LOWER(last_name) LIKE LOWER(:last_name)  AND role_id IN (:role_ids) AND is_completed is TRUE ORDER BY count(person_id) DESC;

count.all.employee = SELECT count(*) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE is_employee_role=TRUE  AND  registration_date BETWEEN (:start_date) AND (:end_date);
count.employees.admins=SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name='ROLE_ADMIN' AND  registration_date BETWEEN (:start_date) AND (:end_date);
count.employees.couriers =SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name='ROLE_COURIER' AND  registration_date BETWEEN (:start_date) AND (:end_date);
count.employees.agent.call.center =SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name='ROLE_CALL_CENTER' AND  registration_date BETWEEN (:start_date) AND (:end_date);
count.employees.couriers.driving= SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) INNER JOIN logistic_company.courier_data USING (person_id) WHERE role_name='ROLE_COURIER' AND courier_travel_mode = 'DRIVING' AND  registration_date BETWEEN (:start_date) AND (:end_date);
count.employees.couriers.walking = SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) INNER JOIN logistic_company.courier_data USING (person_id) WHERE role_name='ROLE_COURIER' AND courier_travel_mode = 'WALKING' AND  registration_date BETWEEN (:start_date) AND (:end_date);
count.users = SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name='ROLE_USER' OR role_name= 'ROLE_VIP_USER' AND registration_date BETWEEN (:start_date) AND (:end_date);
count.users.normal = SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name='ROLE_USER' AND registration_date BETWEEN (:start_date) AND (:end_date);
count.users.vip = SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name= 'ROLE_VIP_USER' AND registration_date BETWEEN (:start_date) AND (:end_date);
count.unregistered.contact = SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name= 'ROLE_UNCONFIRMED' AND registration_date BETWEEN (:start_date) AND (:end_date);

select.employee.call_center.couriers = SELECT count(person_id) As count_orders, person_id, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, priority, now()FROM logistic_company.person INNER JOIN logistic_company.contact USING (contact_id) INNER JOIN logistic_company.task ON person_id=employee_id INNER JOIN logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) GROUP BY person_id, priority, registration_date, email, contact_id, first_name, last_name, phone_number, role_id, role_name, is_employee_role, is_completed HAVING role_name = 'ROLE_COURIER' OR role_name='ROLE_CALL_CENTER';


count.employees.managers= SELECT count(person_id) FROM logistic_company.person INNER JOIN  logistic_company.person_role USING (person_id) INNER JOIN logistic_company.role USING (role_id) WHERE role_name= 'ROLE_MANAGER' AND  registration_date BETWEEN (:start_date) AND (:end_date);
count.offices = SELECT count(office_id) FROM  logistic_company.office;
count.order = SELECT count(order_id) FROM logistic_company.order;

insert.role = INSERT INTO logistic_company.role(role_name, is_employee_role, priority) VALUES (?,?,?)
upsert.role = INSERT INTO  logistic_company.role(role_id, role_name, is_employee_role, priority) VALUES (?,?,?,?) ON CONFLICT (role_id) DO UPDATE SET (role_id, role_name, is_employee_role, priority) = (excluded.role_id, excluded.role_name, excluded.is_employee_role, excluded.priority)
delete.role = DELETE FROM  logistic_company.role WHERE role_id = ?
select.role = SELECT role_id, role_name, is_employee_role, priority FROM  logistic_company.role WHERE role_id= ?
select.role.by.person_id = SELECT role.role_id, role_name, is_employee_role, priority FROM logistic_company.person_role JOIN logistic_company.role ON (person_role.role_id = role.role_id) WHERE person_role.person_id = ?
select.role.by.name = SELECT role_id, role_name, is_employee_role, priority FROM logistic_company.role WHERE role_name = ?
select.role.employee = SELECT role_id, role_name, is_employee_role, priority FROM logistic_company.role WHERE is_employee_role = TRUE
select.role.client = SELECT role_id, role_name, is_employee_role, priority FROM logistic_company.role WHERE is_employee_role = FALSE
select.role.employee.statistic= SELECT role_id, role_name, is_employee_role, priority FROM logistic_company.role WHERE role_name= 'ROLE_CALL_CENTER' OR role_name= 'ROLE_COURIER'

select.registration_link= SELECT registration_link_id, person_id FROM logistic_company.registration_link WHERE registration_link_id = ?
insert.registration_link = INSERT INTO logistic_company.registration_link (registration_link_id, person_id) VALUES (?,?)
delete.registration_link = DELETE FROM  logistic_company.registration_link  WHERE registration_link_id = ?

upsert.person_role = INSERT INTO logistic_company.person_role (person_id, role_id) VALUES (?,?) ON CONFLICT DO NOTHING
delete.person_role = DELETE FROM logistic_company.person_role WHERE person_id = ? AND role_id = ?
delete.person_role.by.person_id = DELETE FROM logistic_company.person_role WHERE person_id = ?
select.person_role = SELECT person_id, role_id FROM person_role WHERE WHERE role_id = ? AND person_id = ?

insert.contact = INSERT INTO logistic_company.contact(first_name, last_name, phone_number, email)  VALUES (?,?,?,?);
upsert.contact =INSERT INTO logistic_company.contact(contact_id, first_name, last_name, phone_number, email)  VALUES (?,?,?,?,?) ON CONFLICT (contact_id) DO UPDATE SET (contact_id, first_name, last_name, phone_number, email) = (excluded.contact_id, excluded.first_name, excluded.last_name, excluded.phone_number, excluded.email);
delete.contact = DELETE FROM logistic_company.contact WHERE contact.contact_id = ?;
select.contact =  SELECT contact_id, first_name, last_name, phone_number, email FROM  logistic_company.contact WHERE contact_id = ?;
select.contact.by.email = SELECT contact_id, first_name, last_name, phone_number, email FROM logistic_company.contact WHERE email = ?

insert.office = INSERT INTO logistic_company.office(name, address_id)  VALUES(?, ?);
upsert.office = INSERT INTO logistic_company.office(office_id, name, address_id)  VALUES(?, ?, ?) ON CONFLICT (office_id) DO UPDATE SET (office_id, name, address_id) = (excluded.office_id, excluded.name, excluded.address_id);
delete.office = DELETE  FROM  logistic_company.office WHERE office.office_id = ?;

select.office =  SELECT office_id, name, address.address_id, address.address_name  FROM logistic_company.office INNER JOIN logistic_company.address  ON office.address_id = address.address_id WHERE office.office_id = ?;
all.office =SELECT  count("order".order_id) AS count_orders, office.office_id, name, office.address_id, address_name FROM logistic_company.office INNER JOIN logistic_company.address ON office.address_id = address.address_id INNER JOIN logistic_company."order" ON  office.office_id="order".office_id GROUP BY office.office_id, name, office.address_id, address_name;

all.office.by.department.or.address = SELECT  count("order".order_id) AS count_orders, office.office_id, name, office.address_id, address_name FROM logistic_company.office INNER JOIN logistic_company.address ON office.address_id = address.address_id INNER JOIN logistic_company."order" ON  office.office_id="order".office_id GROUP BY office.office_id, name, office.address_id, address_name HAVING LOWER(name) LIKE LOWER(:department) AND LOWER(address_name) LIKE LOWER(:address) 
all.office.sort.by.amount.orders = SELECT  count("order".order_id) AS count_orders, office.office_id, name, office.address_id, address_name FROM logistic_company.office INNER JOIN logistic_company.address ON office.address_id = address.address_id INNER JOIN logistic_company."order" ON  office.office_id="order".office_id GROUP BY office.office_id, name, office.address_id, address_name HAVING LOWER(name) LIKE LOWER(:department) AND LOWER(address_name) LIKE LOWER(:address) ORDER BY count("order".order_id) DESC;
all.office.sort.by.number = SELECT  count("order".order_id) AS count_orders, office.office_id, name, office.address_id, address_name FROM logistic_company.office INNER JOIN logistic_company.address ON office.address_id = address.address_id INNER JOIN logistic_company."order" ON  office.office_id="order".office_id GROUP BY office.office_id, name, office.address_id, address_name HAVING LOWER(name) LIKE LOWER(:department) AND LOWER(address_name) LIKE LOWER(:address) ORDER BY name DESC ;

insert.address = INSERT INTO logistic_company.address(address_name) VALUES (?);
upsert.address = INSERT INTO logistic_company.address(address_id, address_name) VALUES (?, ?)  ON CONFLICT (address_id) DO UPDATE SET (address_id, address_name) = (excluded.address_id, excluded.address_name);
delete.address = DELETE FROM logistic_company.address WHERE address_id = ?;
select.address = SELECT address_id, address_name FROM logistic_company.address WHERE address_id = ?;
select.address.by.name = SELECT address_id, address_name FROM logistic_company.address WHERE address_name = ?;

insert.advertisement = INSERT INTO logistic_company.advertisement(caption, description, show_first_date, show_end_date, type_advertisement_id) VALUES (?, ?, ?, ?, ?)
update.advertisement = UPDATE logistic_company.advertisement SET caption = ?, description = ?, show_first_date = ?, show_end_date = ?, type_advertisement_id = ? WHERE advertisement_id = ?
delete.advertisement = DELETE FROM logistic_company.advertisement WHERE advertisement_id = ?
select.advertisement = SELECT advertisement_id, caption, description, show_first_date, show_end_date, advertisement_type.type_advertisement_id, advertisement_type.advertisement_name FROM logistic_company.advertisement INNER JOIN advertisement_type ON advertisement.type_advertisement_id = advertisement_type.type_advertisement_id WHERE advertisement_id = ?
select.advertisement.type.by.name = SELECT type_advertisement_id, advertisement_name FROM logistic_company.advertisement_type WHERE advertisement_name = ?;
all.advertisements = SELECT advertisement_id, caption, description, show_first_date, show_end_date, advertisement_type.type_advertisement_id, advertisement_type.advertisement_name FROM logistic_company.advertisement INNER JOIN advertisement_type ON advertisement.type_advertisement_id = advertisement_type.type_advertisement_id ORDER BY show_first_date ASC;
count.advertisements = SELECT count(*) FROM logistic_company.advertisement;
select.advertisement.amount.for.page = SELECT advertisement_id, caption, description, show_first_date, show_end_date, advertisement_type.type_advertisement_id, advertisement_type.advertisement_name FROM logistic_company.advertisement INNER JOIN advertisement_type ON advertisement.type_advertisement_id = advertisement_type.type_advertisement_id ORDER BY show_first_date ASC LIMIT ? OFFSET ?;

select.forgot_password.by.person_id = SELECT person_id, reset_token FROM logistic_company.reset_password WHERE person_id = ?
select.forgot_password.by.reset_token = SELECT person_id, reset_token FROM logistic_company.reset_password WHERE reset_token = ?
insert.forgot_password = INSERT INTO logistic_company.reset_password(person_id, reset_token) VALUES (?, ?)
delete.forgot_password = DELETE FROM logistic_company.reset_password WHERE person_id = ?

select.task.uncompleted = SELECT task_id, order_id, employee_id, is_completed FROM logistic_company.task WHERE is_completed = FALSE
select.task.uncompleted.by.employee_id = SELECT task_id, order_id, employee_id, is_completed FROM logistic_company.task WHERE is_completed = FALSE AND employee_id = ?

select.work_day.schedule_for_day = SELECT employee_id, week_day, start_time, end_time FROM logistic_company.work_day WHERE employee_id = :employee_id AND week_day = trim(to_char(:date, 'DAY')) :: logistic_company.week_day AND :date NOT IN (SELECT :date FROM logistic_company.day_off WHERE :date BETWEEN start_date AND end_date);

select.order_type = SELECT order_type_id, name, max_weight, max_width, max_height, max_length FROM logistic_company.order_type WHERE order_type_id = ?;
insert.order_type = INSERT INTO order_type (name, max_weight, max_width, max_height, max_length) VALUES (?,?,?,?,?)
upsert.order_type = INSERT INTO order_type (order_type_id, name, max_weight, max_width, max_height, max_length) VALUES (?,?,?,?,?,?) ON CONFLICT (order_type_id) DO UPDATE SET (name, max_weight, max_width, max_height, max_length) = (excluded.name, excluded.max_weight, excluded.max_width, excluded.max_height, excluded.max_length)
delete.order_type = DELETE FROM logistic_company.order_type WHERE order_type.order_type_id = ?
all.order_type = SELECT order_type_id, name, max_weight, max_width, max_height, max_length FROM logistic_company.order_type

select.task = SELECT task_id, employee_id, order_id, is_completed FROM logistic_company.task
insert.task = INSERT INTO logistic_company.task (employee_id, order_id, is_completed) VALUES (?,?,?)
upsert.task = INSERT INTO logistic_company.task (task_id, employee_id, order_id, is_completed) VALUES (?,?,?,?) ON CONFLICT (task_id) DO UPDATE SET (employee_id, order_id, is_completed) = (excluded.employee_id, excluded.order_id, excluded.is_completed) 
delete.task = DELETE FROM logistic_company.task WHERE task_id = ?


all.status.id = SELECT order_status_id, status_name FROM order_status;

all.status = SELECT order_status_id, status_name FROM logistic_company.order_status;
select.task.by.order_id = SELECT task_id, employee_id, order_id, is_completed FROM logistic_company.task WHERE order_id = ?


select.order = SELECT DISTINCT  order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) LEFT JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON  (courier_id = person_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE order_id = ?
insert.order = INSERT INTO logistic_company.order (creation_time, delivery_time, order_status_time, courier_id, receiver_contact_id, receiver_address_id, sender_contact_id, sender_address_id, office_id, order_status_id, order_type_id, weight, width, height, length) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)
update.order = UPDATE logistic_company.order SET (creation_time, delivery_time, order_status_time, courier_id, receiver_contact_id, receiver_address_id, sender_contact_id, sender_address_id, office_id, order_status_id, order_type_id, weight, width, height, length) = (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?) WHERE order_id = ?
delete.order = DELETE FROM "order" WHERE order_id = ?
select.order.confirmed = SELECT DISTINCT  order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) INNER JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON (courier_id = person_id) INNER JOIN logistic_company.task USING (order_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE order_status_id = 5
select.order.not_processed = SELECT DISTINCT  order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) LEFT JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON (courier_id = person_id) INNER JOIN logistic_company.task USING (order_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE is_completed = FALSE
select.order.by.user = SELECT  order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id FROM logistic_company.order  LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) LEFT JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON  (courier_id = person_id) LEFT JOIN logistic_company.order_type USING (order_type_id)  WHERE  sender_contact_id = ? OR receiver_contact_id = ?;
select.order.by.person = SELECT order_id, creation_date, delivery_time, order_status_time, courier_id, receiver_id, sender_id, office_id, order_status_id FROM "order" WHERE sender_id= ?;


select.order.search.receiver = SELECT  order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id, now()FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) LEFT JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON  (courier_id = person_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE  LOWER(receiver_contact.first_name) LIKE LOWER(:first_name_contact) AND LOWER(receiver_contact.last_name) LIKE LOWER(:last_name_contact) AND order_type_id IN (:destination_type) AND order_status_id IN (:order_status) AND receiver_contact_id = (:receiver_contact_id) AND creation_time BETWEEN (:start_date) AND (:end_date);
select.order.search.sender = SELECT  order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id, now()FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) LEFT JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON  (courier_id = person_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE  LOWER(sender_contact.first_name) LIKE LOWER(:first_name_contact) AND LOWER(sender_contact.last_name) LIKE LOWER(:last_name_contact) AND order_type_id IN (:destination_type) AND order_status_id IN (:order_status) AND sender_contact_id = (:sender_contact_id) AND creation_time BETWEEN (:start_date) AND (:end_date) ;
select.order.search.from.office = SELECT  order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id, now()FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) LEFT JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON  (courier_id = person_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE receiver_contact_id = (:receiver_contact_id) AND sender_contact_id is NULL;



select.order.not_processed.by.employee_id = SELECT DISTINCT order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) LEFT JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON (courier_id = person_id) INNER JOIN logistic_company.task USING (order_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE employee_id = ? AND is_completed = FALSE;

select.order.confirmed.by.employee_id = SELECT DISTINCT order_id, creation_time, delivery_time, order_status_time, courier_id, receiver_address.address_id AS receiver_address_id, receiver_address.address_name AS receiver_address_name, sender_address.address_id AS sender_address_id, sender_address.address_name AS sender_address_name, office_id, weight, width, height, length, sender_contact.contact_id AS sender_contact_id, sender_contact.first_name AS sender_first_name, sender_contact.last_name AS sender_last_name, sender_contact.phone_number AS sender_phone_number, sender_contact.email AS sender_email, receiver_contact.contact_id AS receiver_contact_id, receiver_contact.first_name AS receiver_first_name, receiver_contact.last_name AS receiver_last_name, receiver_contact.phone_number AS receiver_phone_number, receiver_contact.email AS receiver_email, order_status_id, status_name, office.name AS office_name, order_type_id, order_type.name AS order_type_name, max_weight, max_width, max_height, max_length, courier.user_name AS courier_user_name, courier.password AS courier_password, courier.registration_date AS courier_registration_date, courier.contact_id AS courier_contact_id FROM logistic_company.order LEFT JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) LEFT JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) LEFT JOIN logistic_company.address AS sender_address ON (sender_address_id = sender_address.address_id) LEFT JOIN logistic_company.address AS receiver_address ON (receiver_address_id = receiver_address.address_id) INNER JOIN logistic_company.order_status USING (order_status_id) LEFT JOIN logistic_company.office USING (office_id) LEFT JOIN logistic_company.person AS courier ON (courier_id = person_id) INNER JOIN logistic_company.task USING (order_id) LEFT JOIN logistic_company.order_type USING (order_type_id) WHERE order_status_id = 5 AND employee_id = ?

select.order_status = SELECT order_status_id, status_name FROM logistic_company.order_status WHERE order_status_id = ?
select.order_status.by.name = SELECT order_status_id, status_name FROM logistic_company.order_status WHERE status_name = ?

select.manager.statistic.filter.order = SELECT person.person_id, user_name, role.role_id, role_name, is_employee_role, priority, "order".order_id,  name, "order".sender_contact_id, "order".receiver_contact_id,  "order".creation_time-"order".delivery_time AS  estimated_delivery_time, contact.first_name, contact.last_name  FROM  logistic_company.person_role INNER JOIN logistic_company.person ON person.person_id=person_role.person_id INNER JOIN logistic_company.contact USING(contact_id) INNER JOIN logistic_company.role ON person_role.role_id=role.role_id INNER JOIN logistic_company.task ON person.person_id=employee_id INNER JOIN logistic_company.order USING (order_id) INNER JOIN logistic_company.order_status USING (order_status_id) INNER JOIN logistic_company.order_type USING (order_type_id) WHERE order_type_id IN (:destination_type) AND order_status_id IN (:order_status)  AND creation_time BETWEEN (:start_date) AND (:end_date) AND  is_completed is TRUE;

select.count.task.by.employee = SELECT count(employee_id) AS count_orders, order_type.name,  person.person_id,  user_name, role.role_id, role_name, is_employee_role, priority FROM  logistic_company.person_role INNER JOIN logistic_company.person ON person.person_id=person_role.person_id INNER JOIN logistic_company.role ON person_role.role_id=role.role_id INNER JOIN logistic_company.task ON person.person_id=employee_id INNER JOIN logistic_company.order USING (order_id) INNER JOIN logistic_company.order_status USING (order_status_id) INNER JOIN logistic_company.order_type USING (order_type_id) GROUP BY  priority, task.employee_id, person.user_name, person.person_id, role_name, is_employee_role,order_status.status_name, role.role_id, task.is_completed, is_employee_role, person.person_id, order_type_id, order_status_id, creation_time, order_type.name HAVING order_type_id IN (:destination_type) AND order_status_id IN (:order_status)  AND creation_time BETWEEN (:start_date) AND (:end_date) AND  is_completed is TRUE;

count.orders.from.office = SELECT count(order_id) FROM logistic_company.order INNER JOIN logistic_company.office USING (office_id) WHERE  creation_time BETWEEN (:start_date) AND (:end_date);
count.order.hand.to.hand = SELECT count(order_id)  FROM  logistic_company.order INNER JOIN logistic_company.contact AS sender_contact ON (sender_contact_id = sender_contact.contact_id) INNER  JOIN logistic_company.contact AS receiver_contact ON (receiver_contact_id = receiver_contact.contact_id) WHERE  creation_time BETWEEN (:start_date) AND (:end_date);

count.orders.by.date = SELECT count(order_id) FROM logistic_company.order WHERE  creation_time BETWEEN (:start_date) AND (:end_date);

select.courier_data = SELECT person_id, courier_status, courier_last_location, courier_travel_mode, route from logistic_company."courier_data"
select.courier_data.by_id = SELECT person_id, courier_status, courier_last_location, courier_travel_mode, route from logistic_company."courier_data" WHERE person_id = ?
insert.courier_data = INSERT INTO logistic_company."courier_data" (person_id, courier_status, courier_last_location, courier_travel_mode, route) VALUES (?,? :: logistic_company.courier_status,?,?,? :: jsonb)
upsert.courier_data = INSERT INTO logistic_company."courier_data" (person_id, courier_status, courier_last_location, courier_travel_mode, route) VALUES (?,? :: logistic_company.courier_status,?,?,? :: jsonb) ON CONFLICT (person_id) DO UPDATE SET (courier_status, courier_last_location, courier_travel_mode, route) = (excluded.courier_status, excluded.courier_last_location, excluded.courier_travel_mode, excluded.route)
delete.courier_data = DELETE FROM logistic_company."courier_data" WHERE person_id = ?
select.courier_data.by.username = SELECT person_id, courier_status, courier_last_location, courier_travel_mode, route FROM logistic_company."courier_data" INNER JOIN logistic_company.person USING (person_id) WHERE user_name = ?